// <auto-generated />
using System;
using CiOHomePage.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CiOHomePage.Server.Migrations
{
 [DbContext(typeof(AppDbContext))]
 [Migration("20250101000000_InitialCreate")]
 partial class InitialCreate
 {
 protected override void BuildTargetModel(ModelBuilder modelBuilder)
 {
 #pragma warning disable612,618
 modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

 modelBuilder.Entity("CiOHomePage.Server.Models.CalendarEvent", b =>
 {
 b.Property<Guid>("Id").HasColumnType("TEXT");
 b.Property<int>("Category").HasColumnType("INTEGER");
 b.Property<string>("CreatedByUserId").IsRequired().HasColumnType("TEXT");
 b.Property<DateTime>("EndUtc").HasColumnType("TEXT");
 b.Property<bool>("IsBandWide").HasColumnType("INTEGER");
 b.Property<string>("Location").HasMaxLength(200).HasColumnType("TEXT");
 b.Property<string>("Notes").HasColumnType("TEXT");
 b.Property<DateTime>("StartUtc").HasColumnType("TEXT");
 b.Property<string>("Title").IsRequired().HasMaxLength(200).HasColumnType("TEXT");
 b.Property<string>("Type").IsRequired().HasMaxLength(50).HasColumnType("TEXT");
 b.HasKey("Id");
 b.ToTable("CalendarEvents");
 });

 modelBuilder.Entity("CiOHomePage.Server.Models.EventRsvp", b =>
 {
 b.Property<Guid>("Id").HasColumnType("TEXT");
 b.Property<Guid>("EventId").HasColumnType("TEXT");
 b.Property<DateTime>("RespondedUtc").HasColumnType("TEXT");
 b.Property<int>("Status").HasColumnType("INTEGER");
 b.Property<string>("UserId").IsRequired().HasColumnType("TEXT");
 b.HasKey("Id");
 b.HasIndex("EventId", "UserId").IsUnique();
 b.ToTable("EventRsvps");
 });

 modelBuilder.Entity("CiOHomePage.Server.Models.Gig", b =>
 {
 b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");
 b.Property<string>("City").IsRequired().HasMaxLength(200).HasColumnType("TEXT");
 b.Property<DateTime>("Date").HasColumnType("TEXT");
 b.Property<bool>("IsSoldOut").HasColumnType("INTEGER");
 b.Property<string>("TicketUrl").HasColumnType("TEXT");
 b.Property<string>("Venue").IsRequired().HasMaxLength(200).HasColumnType("TEXT");
 b.HasKey("Id");
 b.HasIndex("Date");
 b.ToTable("Gigs");
 });

 modelBuilder.Entity("CiOHomePage.Server.Models.MerchSale", b =>
 {
 b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");
 b.Property<string>("Category").IsRequired().HasColumnType("TEXT");
 b.Property<DateTime>("DateSold").HasColumnType("TEXT");
 b.Property<string>("ItemName").IsRequired().HasColumnType("TEXT");
 b.Property<decimal>("SalePrice").HasColumnType("TEXT");
 b.Property<int>("Quantity").HasColumnType("INTEGER");
 b.HasKey("Id");
 b.ToTable("MerchSales");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
 {
 b.Property<string>("Id").HasColumnType("TEXT");
 b.Property<string>("ConcurrencyStamp").HasColumnType("TEXT");
 b.Property<string>("Name").HasMaxLength(256).HasColumnType("TEXT");
 b.Property<string>("NormalizedName").HasMaxLength(256).HasColumnType("TEXT");
 b.HasKey("Id");
 b.HasIndex("NormalizedName").IsUnique().HasDatabaseName("RoleNameIndex");
 b.ToTable("AspNetRoles");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
 {
 b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");
 b.Property<string>("ClaimType").HasColumnType("TEXT");
 b.Property<string>("ClaimValue").HasColumnType("TEXT");
 b.Property<string>("RoleId").IsRequired().HasColumnType("TEXT");
 b.HasKey("Id");
 b.HasIndex("RoleId");
 b.ToTable("AspNetRoleClaims");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
 {
 b.Property<string>("Id").HasColumnType("TEXT");
 b.Property<int>("AccessFailedCount").HasColumnType("INTEGER");
 b.Property<string>("ConcurrencyStamp").HasColumnType("TEXT");
 b.Property<string>("Email").HasMaxLength(256).HasColumnType("TEXT");
 b.Property<bool>("EmailConfirmed").HasColumnType("INTEGER");
 b.Property<bool>("LockoutEnabled").HasColumnType("INTEGER");
 b.Property<DateTimeOffset?>("LockoutEnd").HasColumnType("TEXT");
 b.Property<string>("NormalizedEmail").HasMaxLength(256).HasColumnType("TEXT");
 b.Property<string>("NormalizedUserName").HasMaxLength(256).HasColumnType("TEXT");
 b.Property<string>("PasswordHash").HasColumnType("TEXT");
 b.Property<string>("PhoneNumber").HasColumnType("TEXT");
 b.Property<bool>("PhoneNumberConfirmed").HasColumnType("INTEGER");
 b.Property<string>("SecurityStamp").HasColumnType("TEXT");
 b.Property<bool>("TwoFactorEnabled").HasColumnType("INTEGER");
 b.Property<string>("UserName").HasMaxLength(256).HasColumnType("TEXT");
 b.HasKey("Id");
 b.HasIndex("NormalizedEmail").HasDatabaseName("EmailIndex");
 b.HasIndex("NormalizedUserName").IsUnique().HasDatabaseName("UserNameIndex");
 b.ToTable("AspNetUsers");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
 {
 b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");
 b.Property<string>("ClaimType").HasColumnType("TEXT");
 b.Property<string>("ClaimValue").HasColumnType("TEXT");
 b.Property<string>("UserId").IsRequired().HasColumnType("TEXT");
 b.HasKey("Id");
 b.HasIndex("UserId");
 b.ToTable("AspNetUserClaims");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
 {
 b.Property<string>("LoginProvider").HasColumnType("TEXT");
 b.Property<string>("ProviderKey").HasColumnType("TEXT");
 b.Property<string>("ProviderDisplayName").HasColumnType("TEXT");
 b.Property<string>("UserId").IsRequired().HasColumnType("TEXT");
 b.HasKey("LoginProvider", "ProviderKey");
 b.HasIndex("UserId");
 b.ToTable("AspNetUserLogins");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
 {
 b.Property<string>("UserId").HasColumnType("TEXT");
 b.Property<string>("RoleId").HasColumnType("TEXT");
 b.HasKey("UserId", "RoleId");
 b.HasIndex("RoleId");
 b.ToTable("AspNetUserRoles");
 });

 modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
 {
 b.Property<string>("UserId").HasColumnType("TEXT");
 b.Property<string>("LoginProvider").HasColumnType("TEXT");
 b.Property<string>("Name").HasColumnType("TEXT");
 b.Property<string>("Value").HasColumnType("TEXT");
 b.HasKey("UserId", "LoginProvider", "Name");
 b.ToTable("AspNetUserTokens");
 });

 modelBuilder.Entity("CiOHomePage.Server.Models.EventRsvp", b =>
 {
 b.HasOne("CiOHomePage.Server.Models.CalendarEvent", "Event")
 .WithMany("Rsvps")
 .HasForeignKey("EventId")
 .OnDelete(DeleteBehavior.Cascade)
 .IsRequired();
 b.Navigation("Event");
 });

 modelBuilder.Entity("CiOHomePage.Server.Models.CalendarEvent", b =>
 {
 b.Navigation("Rsvps");
 });
 #pragma warning restore612,618
 }
 }
}
